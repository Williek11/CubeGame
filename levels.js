const k = [false],

levels = {
    autoGenerated: [
        {
            name: 1,
            contents: ()=>{
                const wE = window.innerWidth / 2;
                const hE = window.innerHeight / 2 - 10;
                let n = (x) => {
                    game.entities.all.push({
                        x: x,
                        y: hE,
                        color: colors.entities.enemy.normal,
                        del: false,
                        width: 20,
                        height: 20,
                        update: function () {
                            game.ctx.fillStyle = this.color;
                            game.ctx.fillRect(this.x, hE, 20, 20);
                            collide(this, () => {
                                if (player.events[0].on) {
                                    this.del = true
                                }
                            });
                        }
                    })
                }
                n(wE - 10);n(wE - 210);n(wE + 190);
                const txt = (nmb, content)=>{constructors.text("Oxanium", "15px", 30, window.innerHeight - nmb, content);}
                txt(75, "Let me introduce you to the basics:");
                txt(60, "The most important principle is: when pressing shift, you can kill enemies and go faster.");
                txt(45, "Also, you can go faster pressing Shift. Anyway, when you kill all enemies in a level, you procced to the next.");
            },
        },
        {
            name: 2,
            contents: ()=>{
                const wE = window.innerWidth / 2;
                const hE = window.innerHeight / 2 - 10;
                let n = (x, dmg) => {
                    game.entities.all.push({
                        x: x,
                        y: hE,
                        color: colors.entities.enemy.normal,
                        del: false,
                        width: 20,
                        height: 20,
                        dmg: dmg,
                        update: function () {
                            game.ctx.fillStyle = this.color;
                            game.ctx.fillRect(this.x, hE, 20, 20);
                            collide(this, () => {
                                if (player.events[0].on) {
                                    this.del = true
                                }
                                else if (!player.noHit && !player.events[0].on) { player.onHit(this.dmg) }
                            });
                        }
                    })
                }
                n(wE - 10, 2);n(wE - 210, 1);n(wE + 190, 3);
                const txt = (nmb, content)=>{constructors.text("Oxanium", "15px", 30, window.innerHeight - nmb, content);}
                txt(90, "Another concept you shuld be familiar with: damage.");
                txt(75, "If you touch certain things, you will lose health according to its amount of damage.")
                txt(60, "Try it with those dummies: the first one does 1 of damage, the second one does 2, and the third, 3.")
                txt(45, `Also, don't worry, you'll regenerate your life back. Feel free to experiment with it!`)
            },
            perTick: ()=>{
                if(player.health < 10 && !k[0]) {k[0]=true;setTimeout(()=>{player.onHit(-1);k[0]=false},game.tick * 40)}
            },
        },
        {
            name: 3,
            contents: ()=>{
                const wE = window.innerWidth / 2
                const hE = window.innerHeight / 2 - 10
                let n = (x) => {
                    game.entities.all.push({
                        x: x,
                        y: hE,
                        color: colors.entities.enemy.normal,
                        del: false,
                        width: 20,
                        height: 20,
                        update: function () {
                            game.ctx.fillStyle = this.color;
                            game.ctx.fillRect(this.x, hE, 20, 20);
                            collide(this, () => {
                                if (player.events[0].on) {
                                    this.del = true;
                                }
                            });
                        }
                    })
                }
                n(wE - 10); n(wE - 210); n(wE + 190); n(wE - 410);
                game.entities.all.push({
                    x: wE + 390,
                    y: hE,
                    color: colors.entities.enemy.normal,
                    del: false,
                    width: 20,
                    height: 20,
                    update: function () {
                        game.ctx.fillStyle = this.color;
                        game.ctx.fillRect(wE + 390, hE, 20, 20);
                        collide(this, () => {
                            if (player.events[0].on) {
                                this.del = true; constructors.entity.bonus("health", wE + 390, hE, 20, 20)
                            }
                        });
                    }
                })
                constructors.text("Oxanium", "15px", 30, window.innerHeight - 105, "Something that is also good to know is that enemies may release a health bonus upon death.")
                constructors.text("Oxanium", "15px", 30, window.innerHeight - 90, "Try it out here:")
                constructors.text("Oxanium", "15px", 30, window.innerHeight - 75, "the first to fourth dummies won't release anything, but the fifth dummy will (it's rigged here btw)")
                constructors.text("Oxanium", "15px", 30, window.innerHeight - 60, `But anyway, this is just here to represent that you have a one in five chance of having it dropped.`)
                constructors.text("Oxanium", "15px", 30, window.innerHeight - 45, `Things to note about it: You can pick it up with max health and you can't pick it up while you can't take damage.`)
            },
        },
        {
            name: 4,
            contents: ()=>{
                const wE = window.innerWidth / 2
                let hE = window.innerHeight / 2 - 10
                let rng = ()=>{if(Math.floor(Math.random() * 2) === 0) {return Math.random() * 10} else {return -Math.random() * 10}}
                let n = (x) => {
                    game.entities.all.push({
                        x: x,
                        y: hE,
                        sX: rng(),
                        sY: rng(),
                        color: colors.entities.enemy.normal,
                        del: false,
                        update: function () {
                            game.ctx.fillStyle = this.color;
                            let x = this.x, y = this.y
                            game.ctx.fillRect(x, y, 20, 20);
                            if (player.x <= x + 20 && x <= player.x + player.width && player.y <= y + 20 && y <= player.y + player.height) {
                                if (player.events[0].on) {
                                    this.del = true;
                                    if (Math.floor(Math.random() * 5) === 1) { constructors.entity.bonus("health", x, y, 20, 20) };
                                } else if (!player.noHit && !player.events[0].on) { player.onHit(1) }
                            }

                            if (x < 0) { this.sX *= -1; x = 0 } else if (x > window.innerWidth - 20) { this.sX *= -1; x = window.innerWidth - 20 };
                            if (y < 0) { this.sY *= -1; y = 0 } else if (y > window.innerHeight - 20) { this.sY *= -1; y = window.innerHeight - 20 };

                            this.x = x + this.sX
                            this.y = y + this.sY
                        }
                    })
                }
                n(wE - 10); n(wE - 210); n(wE + 190);
                hE = window.innerHeight / 2 - 210;
                n(wE - 10); n(wE - 210); n(wE + 190);
                hE = window.innerHeight / 2 + 190;
                n(wE - 10); n(wE - 210); n(wE + 190);
                constructors.text("Oxanium", "15px", 30, window.innerHeight - 45, `That's all you need to know for now. Enjoy!`)
            },
        },
        {
            name: 5,
            contents: ()=>{
                const wE = window.innerWidth / 2
                let hE = window.innerHeight / 2 - 10
                let n = (x) => {
                    game.entities.all.push({
                        x: x,
                        y: hE,
                        sX: 7.5,
                        sY: 7.5,
                        color: colors.entities.enemy.normal,
                        del: false,
                        update: function () {
                            game.ctx.fillStyle = this.color;
                            let x = this.x, y = this.y
                            game.ctx.fillRect(x, y, 20, 20);
                            if (player.x <= x + 20 && x <= player.x + player.width && player.y <= y + 20 && y <= player.y + player.height) {
                                if (player.events[0].on) {
                                    this.del = true;
                                    if (Math.floor(Math.random() * 5) === 1) { constructors.entity.bonus("health", x, y, 20, 20) };
                                } else if (!player.noHit && !player.events[0].on) { player.onHit(1) }
                            }

                            if (x < 0) { this.sX *= -1; x = 0 } else if (x > window.innerWidth - 20) { this.sX *= -1; x = window.innerWidth - 20 };
                            if (y < 0) { this.sY *= -1; y = 0 } else if (y > window.innerHeight - 20) { this.sY *= -1; y = window.innerHeight - 20 };

                            this.x = x + this.sX
                            this.y = y + this.sY
                        }
                    })
                }
                n(wE - 10); n(wE - 120); n(wE + 100);
                hE = window.innerHeight / 2 - 120;
                n(wE - 10); n(wE - 120); n(wE + 100);
                hE = window.innerHeight / 2 + 100;
                n(wE - 10); n(wE - 120); n(wE + 100);
            },
        },
        {
            name: 6,
            contents: ()=>{
                const wE = window.innerWidth / 2
                let hE = window.innerHeight / 2 - 10
                let n = (x) => {
                    game.entities.all.push({
                        x: x,
                        y: hE,
                        sX: 10,
                        sY: 10,
                        color: colors.entities.enemy.normal,
                        del: false,
                        update: function () {
                            game.ctx.fillStyle = this.color;
                            let x = this.x, y = this.y
                            game.ctx.fillRect(x, y, 20, 20);
                            if (player.x <= x + 20 && x <= player.x + player.width && player.y <= y + 20 && y <= player.y + player.height) {
                                if (player.events[0].on) {
                                    this.del = true;
                                    if (Math.floor(Math.random() * 5) === 1) { constructors.entity.bonus("health", x, y, 20, 20) };
                                } else if (!player.noHit && !player.events[0].on) { player.onHit(2) }
                            }

                            if (x < 0) { this.sX *= -1; x = 0 } else if (x > window.innerWidth - 20) { this.sX *= -1; x = window.innerWidth - 20 };
                            if (y < 0) { this.sY *= -1; y = 0 } else if (y > window.innerHeight - 20) { this.sY *= -1; y = window.innerHeight - 20 };

                            this.x = x + this.sX
                            this.y = y + this.sY
                        }
                    })
                }
                n(wE - 10); n(wE - 110); n(wE + 90);
                hE = window.innerHeight / 2 - 110;
                n(wE - 10); n(wE - 110); n(wE + 90);
                hE = window.innerHeight / 2 + 90;
                n(wE - 10); n(wE - 110); n(wE + 90);
            },
        },
        {
            name: 7,
            contents: ()=>{
                const wE = window.innerWidth / 2
                let hE = window.innerHeight / 2 - 10
                let n = (x) => {
                    game.entities.all.push({
                        x: x,
                        y: hE,
                        sX: 1,
                        sY: 1,
                        color: colors.entities.projectile.bullet,
                        del: false,
                        update: function () {
                            game.ctx.fillStyle = this.color;
                            let x = this.x, y = this.y
                            game.ctx.fillRect(x, y, 20, 20);
                            if (player.x <= x + 20 && x <= player.x + player.width && player.y <= y + 20 && y <= player.y + player.height) {
                                if (!player.noHit) {
                                    this.del = true;
                                    player.onHit(1)
                                }
                            }

                            if (x < -20) { this.del = true } else if (x > window.innerWidth) { this.del = true };
                            if (y < -20) { this.del = true } else if (y > window.innerHeight) { this.del = true };

                            this.x = x + this.sX
                            this.y = y + this.sY
                        }
                    })
                }
                n(wE - 10); n(wE - 110); n(wE + 90);
                hE = window.innerHeight / 2 - 110;
                n(wE - 10); n(wE - 110); n(wE + 90);
                hE = window.innerHeight / 2 + 90;
                n(wE - 10); n(wE - 110); n(wE + 90);
                constructors.text("Oxanium", "15px", 30, window.innerHeight - 75, `Now, be introduced to a new type of entity: the bullet!`)
                constructors.text("Oxanium", "15px", 30, window.innerHeight - 60, `It's basically the same to the other generic red one, with the exception that it dies when touching a wall or the player.`)
                constructors.text("Oxanium", "15px", 30, window.innerHeight - 45, `Feel free to experiment with it, because you will also regenerate when you take damage.`)
            },
            perTick: ()=>{
                if(player.health < 10 && !k[0]) {k[0]=true;setTimeout(()=>{player.onHit(-1);k[0]=false},game.tick * 40)}
            },
        },
        {
            name: 8,
            contents: ()=>{
                const wE = window.innerWidth / 2
                let hE = window.innerHeight / 2 - 10
                let rng = ()=>{if(Math.floor(Math.random() * 2) === 0) {return Math.random() * 10} else {return -Math.random() * 10}}
                let n = (x) => {
                    game.entities.all.push({
                        x: x,
                        y: hE,
                        sX: rng(),
                        sY: rng(),
                        color: colors.entities.enemy.normal,
                        type: "generic",
                        del: false,
                        update: function () {
                            game.ctx.fillStyle = this.color;
                            let x = this.x, y = this.y
                            game.ctx.fillRect(x, y, 20, 20);

                            if (player.x <= x + 20 && x <= player.x + player.width && player.y <= y + 20 && y <= player.y + player.height) {
                                if (player.events[0].on) {
                                    this.del = true;
                                    if (Math.floor(Math.random() * 5) === 1) { constructors.entity.bonus("health", x, y, 20, 20) };
                                } else if (!player.noHit && !player.events[0].on) { player.onHit(2) }
                            }

                            if (x < 0) { this.sX *= -1; x = 0 } else if (x > window.innerWidth - 20) { this.sX *= -1; x = window.innerWidth - 20 };
                            if (y < 0) { this.sY *= -1; y = 0 } else if (y > window.innerHeight - 20) { this.sY *= -1; y = window.innerHeight - 20 };

                            this.x = x + this.sX
                            this.y = y + this.sY
                        }
                    })
                }
                n(wE - 10); n(wE - 110); n(wE + 90);
                hE = window.innerHeight / 2 - 110;
                n(wE - 10); n(wE - 110); n(wE + 90);
                hE = window.innerHeight / 2 + 90;
                n(wE - 10); n(wE - 110); n(wE + 90);
                constructors.text("Oxanium", "15px", 30, window.innerHeight - 45, `The enemies shoot bullets now!`)
            },
            perTick: ()=>{
                if(game.ticksPassed % 100 === 0) {for(var i = 0, l = game.entities.all.length;i < l;i++) {
                    if(game.entities.all[i].type === "generic")
                    {let rng = ()=>{if(Math.floor(Math.random() * 2) === 0) {return Math.random() * 10} else {return -Math.random() * 10}}
                    constructors.entity.projectile("bullet", game.entities.all[i].x, game.entities.all[i].y, rng(), rng(), 20, 20, 2)
                }}}
            },
        },
        {
            name: 9,
            contents: ()=>{
                const wE = window.innerWidth / 2;
                const canvaHeight = window.innerHeight
                let hE = canvaHeight / 2 - 10;
                const n = (x) => {
                    game.entities.all.push({
                        x: x,
                        y: hE,
                        sX: 7.5,
                        sY: 7.5,
                        color: colors.entities.enemy.normal,
                        type: "generic",
                        del: false,
                        update: function () {
                            game.ctx.fillStyle = this.color;
                            let x = this.x, y = this.y
                            game.ctx.fillRect(x, y, 20, 20);

                            if (player.x <= x + 20 && x <= player.x + player.width && player.y <= y + 20 && y <= player.y + player.height) {
                                if (player.events[0].on) {
                                    this.del = true;
                                    if (Math.floor(Math.random() * 5) === 1) { constructors.entity.bonus("health", x, y, 20, 20) };
                                } else if (!player.noHit && !player.events[0].on) { player.onHit(2); }
                            }

                            if (x < 0) { this.sX *= -1; x = 0 } else if (x > window.innerWidth - 20) { this.sX *= -1; x = window.innerWidth - 20 };
                            if (y < 0) { this.sY *= -1; y = 0 } else if (y > window.innerHeight - 20) { this.sY *= -1; y = window.innerHeight - 20 };

                            this.x = x + this.sX
                            this.y = y + this.sY
                        }
                    })
                }
                n(wE - 10); n(wE - 160); n(wE + 140);
                hE = window.innerHeight / 2 - 160;
                n(wE - 10); n(wE - 160); n(wE + 140);
                hE = window.innerHeight / 2 + 140;
                n(wE - 10); n(wE - 160); n(wE + 140);
            },
            perTick: ()=>{
                if(game.ticksPassed % 40 === 0) {
                    let rnd = Math.random;
                    for(let i = 0, l = game.entities.all.length;i < l;i++) {
                    let entity = game.entities.all[i];
                    if(entity.type === "generic")
                    {let rng = ()=>{if(Math.floor(rnd() * 2) === 0) {return rnd() * 10} else {return -rnd() * 10}}
                    constructors.entity.projectile("bullet", entity.x, entity.y, rng(), rng(), 20, 20, 2);
                }}}
            },
        },
        {
            name: 10,
            contents: ()=>{
                const wE = window.innerWidth / 2;
                const canvaHeight = window.innerHeight
                let hE = canvaHeight / 2 - 10;
                const n = (x) => {
                    game.entities.all.push({
                        x: x,
                        y: hE,
                        sX: 7.5,
                        sY: 7.5,
                        color: colors.entities.enemy.normal,
                        type: "generic",
                        del: false,
                        update: function () {
                            game.ctx.fillStyle = this.color;
                            let x = this.x, y = this.y
                            game.ctx.fillRect(x, y, 20, 20);

                            if (player.x <= x + 20 && x <= player.x + player.width && player.y <= y + 20 && y <= player.y + player.height) {
                                if (player.events[0].on) {
                                    this.del = true;
                                    if (Math.floor(Math.random() * 5) === 1) { constructors.entity.bonus("health", x, y, 20, 20) };
                                } else if (!player.noHit && !player.events[0].on) { player.onHit(2); }
                            }

                            if (x < 0) { this.sX *= -1; x = 0 } else if (x > window.innerWidth - 20) { this.sX *= -1; x = window.innerWidth - 20 };
                            if (y < 0) { this.sY *= -1; y = 0 } else if (y > window.innerHeight - 20) { this.sY *= -1; y = window.innerHeight - 20 };

                            this.x = x + this.sX
                            this.y = y + this.sY
                        }
                    })
                }
                n(wE - 10); n(wE - 160); n(wE + 140);
                hE = window.innerHeight / 2 - 160;
                n(wE - 10); n(wE - 160); n(wE + 140);
                hE = window.innerHeight / 2 + 140;
                n(wE - 10); n(wE - 160); n(wE + 140);
            },
        },
    ],
    updateMenu: ()=>{
        var DOM = $D[1]("levelSelector")
        let nT = ()=>{return 125 + Math.random() * 300}
        const n = (i) => {
            var newDOM = document.createElement("div"), random = 3 + Math.random() * 7
            let nL = 100 + i * 150
            newDOM.style = "position:absolute;left:" + nL + "px;top:" + nT() + "px;";
            newDOM.addEventListener("click", () => { game.start(i) });
            newDOM.innerHTML = '<div class="levelCircle" style="animation:upDown infinite '+random+'s">'+levels.autoGenerated[i].name+'</div>';
            DOM.appendChild(newDOM);
        }
        var l = levels.autoGenerated.length, width = l * 150 + 200, scroll = document.createElement("div")
        for(var i = 0;i < l;i++) {n(i)};
        scroll.style = 'width:'+width+'px;height:0.1px'
        DOM.appendChild(scroll)
    },
}