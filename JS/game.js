/**************/
/**** Game ****/
/**************/

let intervalStart

const game = {
    eventsInterpretor: (i) => {
        const event = player.events[i]
        if(game.keys[event.key]) {if(event.condition() === true) {event.whenHappen()} else {event.whenNo()}}
    },
    ticksPassed: 0,
    sure: true,
    keys: {},
    canvas: $D[1]("canvas"),
    ctx: $D[1]("canvas").getContext("2d"),
    tick: 25,
    tickEvents: [],
    resize:()=>{
        game.canvas.width = window.innerWidth;
        game.canvas.height = window.innerHeight;
    },
    update: ()=>{
        if (game.entities.all.length > 0) {
            for(let i = 0, a = game.tickEvents.length;i < a;i++) {game.tickEvents[i]()}

            game.ticksPassed++

            game.ctx.clearRect(0, 0, window.innerWidth, window.innerHeight);

            game.entities.update();
            player.update();
            game.text.update();

            for (let i = 0, a = game.entities.all; i < game.entities.all.length; i++) { if (a[i]["del"]) { a.splice(i, 1) } };

            for (let i = 0, l = player.events.length; i < l; i++) { game.eventsInterpretor(i) };
        } else {
            clearInterval(intervalStart)
            game.ticksPassed = 0
            const gam = $D[1]("game");
            gam.style.animation = "disappear 1 1s";
            const a = "animation:appear 1 1s;display:block"
            $D[1]("levelSelector").style = a;
            $D[1]("back").style = a
            game.text.all = []
            game.tickEvents = []
            setTimeout(() => { gam.style = "display:none"; }, 900)
        }
    },
    entities: {
        all:[],
        idChoose: 0,
        update: ()=>{for(let i = 0, l = game.entities.all.length;i < l;i++) {game.entities.all[i].update()}},
    },
    text: {
        all:[],
        update: () => {
            const additionalText = $D[1]("additionalText")
            additionalText.innerHTML = ""
            for (let i = 0, l = game.text.all.length; i < l; i++) {
                additionalText.innerHTML += `<div style="font-weight: 100 !important;color:${colors.HTML.game.text};font-size:${game.text.all[i].size};font-family:Oxanium;position:absolute;left:${game.text.all[i].x + "px"};top:${game.text.all[i].y + "px"}">${game.text.all[i].content}</div>`
            }
        }
    },
    restart: ()=>{
        player.x = player.iX;
        player.y = player.iY;
        game.entities.all=[];
    },
    start: (index)=>{
        if(levels.autoGenerated[index].perTick !== undefined) {game.tickEvents.push(levels.autoGenerated[index].perTick)}
        player.x = player.iX;
        player.y = player.iY;
        player.sX = 0;
        player.sY = 0;
        player.health = 10;
        $D[1]("health").innerHTML=`You have ${player.health} points of health.`;
        game.entities.all=[];
        game.index = index
        const levelS = $D[1]("levelSelector");
        levelS.style.animation = "disappear 1 1s";
        const buttonBack = $D[1]("back");
        buttonBack.style.animation = "disappear 1 1s";
        const gam = $D[1]("game");
        gam.style = "animation:appear 1 1s;display:block";
        game.resize();
        levels.autoGenerated[index].contents();
        game.update();
        setTimeout(()=>{
            levelS.style = "display:none";
            buttonBack.style = "display:none";
            setTimeout(()=>{intervalStart = setInterval(game.update,game.tick)},200);
        },900)
        if (game.sure) {
            window.addEventListener("resize", ()=>{game.resize();game.update()});
            window.addEventListener("keydown", (e) => { game.keys[e.key] = true });
            window.addEventListener("keyup", (e) => { game.keys[e.key] = false });
            game.sure = false
        }
        game.text.update()
    },
}

$D[1]("exitLevel").addEventListener("click",()=>{clearInterval(intervalStart)
    game.ticksPassed = 0
    const gam = $D[1]("game");
    gam.style.animation = "disappear 1 1s";
    const a = "animation:appear 1 1s;display:block"
    $D[1]("levelSelector").style = a;
    $D[1]("back").style = a
    game.text.all = []
    game.tickEvents = []
    setTimeout(() => { gam.style = "display:none"; }, 900)
})
levels.updateMenu();